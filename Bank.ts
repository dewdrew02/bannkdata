// ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
interface Customer {
  id: string;
  name: string;
  balance: number;
};


export class bank {
  private customers: Customer[] = [];

  addCustomer(id: string, name: string): void {
    const existing = this.customers.find(c => c.id === id);
    if (existing) {
      console.log(`‚ùå ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ID ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
      return;
    }
    this.customers.push({ id, name, balance: 0 });
    console.log(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ${name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
  }

  // 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô
  deposit(id: string, amount: number): void {
    const customer = this.customers.find(c => c.id === id);
    if (!customer) {
      console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤`);
      return;
    }
    customer.balance += amount;
    console.log(`üí∞ ‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô ${amount} ‡∏ö‡∏≤‡∏ó‡πÉ‡∏´‡πâ ${customer.name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
  }

  // 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
  withdraw(id: string, amount: number): void {
    const customer = this.customers.find(c => c.id === id);
    if (!customer) {
      console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤`);
      return;
    }
    if (customer.balance < amount) {
      console.log(`‚ö†Ô∏è ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô`);
      return;
    }
    customer.balance -= amount;
    console.log(`üí∏ ‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ${amount} ‡∏ö‡∏≤‡∏ó‡∏à‡∏≤‡∏Å ${customer.name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
  }

  // 3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
  checkCustomer(id: string): void {
    const customer = this.customers.find(c => c.id === id);
    if (!customer) {
      console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤`);
      return;
    }
    console.log(`üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:
    - ‡∏ä‡∏∑‡πà‡∏≠: ${customer.name}
    - ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${customer.balance} ‡∏ö‡∏≤‡∏ó`);
  }
}

